{"version":3,"sources":["Pokemon.js","App.js","serviceWorker.js","index.js"],"names":["PokemonComponent","props","this","name","src","id","type","base_experience","React","Component","App","className","map","pokemon","Pokemon","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mOAsCeA,G,kBAlCX,WAAYC,GAAO,qEACTA,I,sEAIN,OACI,6BAEI,6BACI,4BACKC,KAAKD,MAAME,OAKpB,6BACI,yBACIC,IAAG,mFAA8EF,KAAKD,MAAMI,GAAzF,WAKX,6BAAK,oCAAL,IAAmBH,KAAKD,MAAMK,MAG9B,6BAAK,0CAAL,IAAmBJ,KAAKD,MAAMM,iBAG9B,kC,GA7BeC,IAAMC,YCmCtBC,E,YA9BX,WAAYT,GAAO,qEACXA,I,sEAgBR,OACI,yBAAKU,UAAU,OAZD,CAChB,CAACN,GAAI,EAAGF,KAAM,aAAcG,KAAM,OAAQC,gBAAiB,IAC3D,CAACF,GAAI,EAAGF,KAAM,WAAYG,KAAM,QAASC,gBAAiB,IAC1D,CAACF,GAAI,GAAIF,KAAM,UAAWG,KAAM,MAAOC,gBAAiB,IACxD,CAACF,GAAI,GAAIF,KAAM,aAAcG,KAAM,SAAUC,gBAAiB,KAC9D,CAACF,GAAI,GAAIF,KAAM,UAAWG,KAAM,WAAYC,gBAAiB,KAC7D,CAACF,GAAI,GAAIF,KAAM,aAAcG,KAAM,SAAUC,gBAAiB,IAC9D,CAACF,GAAI,GAAIF,KAAM,SAAUG,KAAM,SAAUC,gBAAiB,KAC1D,CAACF,GAAI,IAAKF,KAAM,QAASG,KAAM,SAAUC,gBAAiB,KAM3CK,KAAI,SAACC,GACZ,OAAO,kBAACC,EAAqBD,W,GAtBzBL,IAAMC,WCKJM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.362a0ce3.chunk.js","sourcesContent":["\nimport React from 'react';\n\nclass PokemonComponent extends React.Component{\n    constructor(props){\n        super(props);\n    }\n\n    render() {\n        return(\n            <div>\n                {/* Pokemon'un adını yazdırdık. */}\n                <div>\n                    <h2>\n                        {this.props.name}\n                    </h2>\n                </div>\n\n                {/* Pokemon'un Resimini bastırdık. */}\n                <div>\n                    <img\n                        src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${this.props.id}.png`}\n                    />\n                </div>\n\n                {/* Tipi */}\n                <div><b>Tipi:</b> {this.props.type}</div>\n\n                {/* Gücü */}\n                <div><b>Gücü:</b> {this.props.base_experience}</div>\n\n                {/* Pokemonları ayıran çizgi */}\n                <hr />\n            </div>\n        )\n    }\n}\n\nexport default PokemonComponent;","import React from 'react';\nimport './App.css';\n\n//Pokemon'u Yükle\nimport PokemonComponent from \"./Pokemon\";\n\n\nclass App extends React.Component {\n    constructor(props){\n      super(props);\n\n    }\n\n  render(){\n    const pokemons =  [\n      {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\n      {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\n      {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\n      {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\n      {id: 25, name: 'Pikachu', type: 'electric', base_experience: 112},\n      {id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95},\n      {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\n      {id: 133, name: 'Eevee', type: 'normal', base_experience: 65}\n    ];\n\n    return (\n        <div className=\"App\">\n          {\n            pokemons.map((pokemon) => {\n              return <PokemonComponent {...pokemon} />\n                }\n            )\n          }\n        </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}